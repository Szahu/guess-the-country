{"version":3,"sources":["App.js","utils.js","reportWebVitals.js","index.js"],"names":["TitleComponent","props","id","style","fontSize","population","MainCard","MainComponent","randomCountries","i","length","Math","floor","random","correctOne","state","loaded","callback","res","setState","map","x","name","code","countryCode","data","copy","newItem","fetch","then","json","value","headers","response","myJson","this","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAIMA,EAAiB,SAACC,GACtB,OAAO,oBAAGC,GAAG,YAAN,4CAAiD,wBAAQC,MAAO,CAACC,SAAU,QAA1B,SAAoCH,EAAMI,aAA3F,WAGHC,EAAW,SAACL,GACd,OAAO,qBAAKC,GAAG,WAAR,SACL,cAAC,EAAD,CAAgBG,WAAYJ,EAAMI,gBAMlCE,E,kDACJ,WAAYN,GAAQ,IAAD,sBACjB,cAAMA,GAIN,IAFA,IAAIO,EAAkB,CAAC,EAAG,EAAG,EAAG,GAExBC,EAAI,EAAGA,EAAID,EAAgBE,OAAOD,IACxCD,EAAgBC,GAAKE,KAAKC,MAAsB,IAAhBD,KAAKE,UANtB,OASjB,EAAKC,WAAaH,KAAKC,MAAsB,EAAhBD,KAAKE,UAElC,EAAKE,MAAQ,CAACP,gBAAiBA,EAAiBQ,QAAQ,GAXvC,E,qDAcnB,WAAqB,IC/BCC,ED+BF,OC/BEA,EDiCZ,SAACC,GAEP,EAAKC,SAAS,CAACX,gBAAiB,EAAKO,MAAMP,gBAAgBY,KAAI,SAACC,GAC9D,MAAO,CAACC,KAAMJ,EAAIG,GAAGC,KAAMC,KAAML,EAAIG,GAAGE,KAAMlB,WAAY,QAG5D,IANe,eAMPI,GC1BsB,IAAUe,EAAaP,EAAbO,ED2BjB,EAAKT,MAAMP,gBAAgBC,GAAGc,KC3BAN,ED2BM,SAACQ,GACxD,IAAIC,EAAI,YAAO,EAAKX,MAAMP,iBACtBmB,EAAO,eAAOD,EAAKjB,IACvBkB,EAAQtB,WAAaoB,EACrBC,EAAKjB,GAAKkB,EACV,EAAKR,SAAS,CAACX,gBAAiBkB,EAAMV,QAAQ,KC9BnCY,MAAM,uCAAD,OAAwCJ,EAAxC,uCACrBK,MAAK,SAAAX,GAAG,OAAIA,EAAIY,UAChBD,MAAK,SAAAJ,GAAUR,EAASQ,EAAK,GAAG,GAAGM,WDsB1BtB,EAAI,EAAGA,EAAI,EAAKM,MAAMP,gBAAgBE,OAAQD,IAAM,EAApDA,ICtCVmB,MAAM,mBAAoB,CAACI,QAAS,CAClC,eAAgB,kBAChB,OAAU,sBAEXH,MAAK,SAASI,GACb,OAAOA,EAASH,UAEjBD,MAAK,SAASK,GACbjB,EAASiB,Q,oBDyDb,WACE,OAAO,8BACL,cAAC,EAAD,CAAU7B,WAAY8B,KAAKpB,MAAMP,gBAAgB2B,KAAKrB,YAAYT,mB,GApD5C+B,IAAMC,WAoEnBC,MAXf,WACE,OACE,gCACA,qBAAKC,UAAU,qBACb,qBAAKA,UAAU,UAAf,SACA,cAAC,EAAD,UElESC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1b490033.chunk.js","sourcesContent":["import React from \"react\";\nimport { getCountryPopulation, getData } from \"./utils\";\nimport './App.css';\n\nconst TitleComponent = (props) => {\n  return <p id=\"titleText\">The country with population of <strong style={{fontSize: '33px'}}>{props.population}</strong> is:</p>\n}\n\nconst MainCard = (props) => {\n    return <div id=\"mainCard\">\n      <TitleComponent population={props.population}/>\n    </div>\n}\n\n\n\nclass MainComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    //console.clear();\n    let randomCountries = [0, 0, 0, 0];\n  \n    for(let i = 0; i < randomCountries.length;i++) {\n      randomCountries[i] = Math.floor(Math.random() * 200);\n    }\n\n    this.correctOne = Math.floor(Math.random() * 3);\n\n    this.state = {randomCountries: randomCountries, loaded: false};\n  }\n\n  componentDidMount() {\n    \n    getData((res) => {\n\n      this.setState({randomCountries: this.state.randomCountries.map((x) => {\n        return {name: res[x].name, code: res[x].code, population: 0}\n      })});\n\n      for(let i = 0; i < this.state.randomCountries.length; i++) {\n        getCountryPopulation(this.state.randomCountries[i].code, (data) => {\n          let copy = [...this.state.randomCountries];\n          let newItem = {...copy[i]};\n          newItem.population = data;\n          copy[i] = newItem;\n          this.setState({randomCountries: copy, loaded: true});\n        });\n      } \n      \n    }); \n\n  }\n\n  /*\n  render() {\n    return (<div>\n      <ul>\n        {\n          this.state.loaded ? \n           this.state.randomCountries.map((element) => {return <li key={element.code}>{element.population}</li>}) :\n          <li>loading</li>\n        }\n      </ul>\n      </div>)\n  } */\n\n  render() {\n    return <div>\n      <MainCard population={this.state.randomCountries[this.correctOne].population}/>\n      </div>;\n  }\n}\n\nfunction App() {\n  return (\n    <div>\n    <div className=\"background-image\"></div>\n      <div className=\"content\">\n      <MainComponent/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const getData = (callback) => {\r\n    fetch('countryList.json', {headers: {\r\n      'Content-Type': 'applicaton/json',\r\n      'Accept': 'application/json'\r\n    }})\r\n    .then(function(response){\r\n      return response.json();\r\n    })\r\n    .then(function(myJson){\r\n      callback(myJson)\r\n    });\r\n}\r\n\r\nexport const getCountryPopulation = function (countryCode, callback) {\r\n\r\n    const response = fetch(`http://api.worldbank.org/v2/country/${countryCode}/indicator/SP.POP.TOTL?format=json`)\r\n    .then(res => res.json())\r\n    .then(data => { callback(data[1][1].value)}); \r\n    \r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}