{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["correctColor","wrongColor","hasADublet","array","i","length","j","getCountryPopulation","countryCode","callback","a","fetch","then","res","json","data","value","populationToFormatedString","population","popString","toString","slice","console","error","TitleComponent","props","id","style","fontSize","MainCard","useState","pressedIndex","setPressedIndex","guessCasted","setGuessCasted","onClickCallback","index","chooseRightColor","correctOne","countries","map","country","color","label","name","onClick","correctButton","resetCallback","CountryButton","backgroundColor","StaticCountryButton","ResetButton","MainComponent","resetRandomCountryList","randomCountries","Math","floor","random","x","jsonWithCounties","code","setState","state","loaded","bind","allGuesses","correctGuesses","response","this","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d65614c9.chunk.js","sourcesContent":["//COLORS: \r\nexport const correctColor = '#95D575';\r\nexport const wrongColor = '#DE3C66';\r\n\r\nexport const hasADublet = (array) => {\r\n  for(let i = 0;i<array.length;i++) {\r\n    for(let j = 0;j < array.length;j++) {\r\n      if(i === j) {continue;}\r\n      if(array[i] === array[j]) {return true;}\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n//fethching json with list of all countries\r\nexport const fetchCountriesList = async (callback) => {\r\n    fetch('countryList.json', {headers: {\r\n      'Content-Type': 'applicaton/json',\r\n      'Accept': 'application/json'\r\n    }})\r\n    .then(function(response){\r\n      return response.json();\r\n    })\r\n    .then(function(myJson){\r\n      callback(myJson)\r\n    });\r\n}\r\n\r\n//calling worldbak api to get population by country code\r\nexport const getCountryPopulation = async function (countryCode, callback) {\r\n    await fetch(`https://api.worldbank.org/v2/country/${countryCode}/indicator/SP.POP.TOTL?format=json`)\r\n    .then(res => res.json())\r\n    .then(data => { callback(data[1][1].value)}); \r\n}\r\n\r\n//formatting population into readable string\r\nexport function populationToFormatedString(population) {\r\n  if(population) {\r\n    let popString = population.toString();\r\n    switch(popString.length) {\r\n      case 9:\r\n        return popString.slice(0, 3) + ' million';\r\n      case 8:\r\n        return popString.slice(0, 2) + ' million';\r\n      case 7:\r\n        return popString.slice(0, 1) + ' million';\r\n      case 6:\r\n        return popString.slice(0, 3) + ' thousand';\r\n      case 5:\r\n          return popString.slice(0, 2) + ' thousand';\r\n      case 4:\r\n        return popString.slice(0, 1) + ' thousand';\r\n      case 3:\r\n        return popString.slice(0, 2) + ' thousand';\r\n      default:\r\n        console.error('something went wrong');\r\n        return 'gotta add more cases to the switch statement'\r\n    }\r\n  } else {\r\n    return 0;\r\n  }\r\n  \r\n}\r\n\r\n","import React, { useState } from \"react\";\nimport { getCountryPopulation, fetchCountriesList, populationToFormatedString, correctColor, wrongColor, hasADublet } from \"./utils\";\nimport './App.css';\n\nconst TitleComponent = (props) => {\n  return <p id=\"titleText\">The country with population of <br/> <strong style={{fontSize: '33px'}}>{props.population}</strong> is:</p>\n}\n\nconst MainCard = (props) => {\n\n    const [pressedIndex, setPressedIndex] = useState(-1);\n    const [guessCasted, setGuessCasted] = useState(false);\n    const onClickCallback = (index) => {setGuessCasted(true); setPressedIndex(index);}\n\n    const chooseRightColor = (i) => {\n      if(guessCasted) {\n        if(i===pressedIndex && i===props.correctOne) {return correctColor;}\n        else if(i===pressedIndex) {return wrongColor;} \n        else if(i===props.correctOne) {return correctColor}\n        else {return 'white';}\n      }\n    }\n\n    const correctButton = (country, i) => {\n      if(!guessCasted) {\n        return <CountryButton key={country.name} onClick={onClickCallback} index={i}\n        color={chooseRightColor(i)} label={country.name}/>\n      } else if(guessCasted) {\n        return <StaticCountryButton key={country.name} color={ guessCasted ? i===pressedIndex && i===props.correctOne ? correctColor : i===pressedIndex ?  wrongColor : i===props.correctOne ? correctColor : 'white' : 'white'} label={country.name}/>\n      }\n    }\n\n    return <div id=\"mainCard\">\n      <TitleComponent key='titleComponent' population={populationToFormatedString(props.countries[props.correctOne].population)}/>\n      {props.countries.map((country, i) => {\n        return correctButton(country, i);}\n      )}\n      <ResetButton callback={() => {props.resetCallback(); setGuessCasted(false)}}/>\n    </div>\n}\n\nconst CountryButton = (props) => {\n  return <button id=\"countryButton\" onClick={() => props.onClick(props.index)} style={{backgroundColor: props.color}}>{props.label}</button>\n}\n\nconst StaticCountryButton = (props) => {\n  return <button id=\"countryButton\" style={{backgroundColor: props.color}}>{props.label}</button>\n}\n\nconst ResetButton = (props) => {\n  return <button id=\"nextButton\" onClick={props.callback}>Next</button>\n}\n\nclass MainComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    //console.clear();\n    let randomCountries = [0, 0, 0, 0];\n\n    for(let i = 0; i < randomCountries.length;i++) {\n      randomCountries[i] = Math.floor(Math.random() * 200);\n    }\n\n    const correctOne = Math.floor(Math.random() * 4);\n\n    this.state = {randomCountries: randomCountries, correctOne: correctOne, loaded: false};\n    this.jsonWithCounties = 0;\n    this.resetRandomCountryList = this.resetRandomCountryList.bind(this);\n    this.allGuesses = 0;\n    this.correctGuesses = 0;\n  }\n\n  resetRandomCountryList = async () => {\n    let randomCountries = [0, 0, 0, 0];\n    while(hasADublet(randomCountries)) {\n      for(let i = 0; i < randomCountries.length;i++) {\n        randomCountries[i] = Math.floor(Math.random() * 200);\n      }\n    }\n  \n    randomCountries = randomCountries.map((x) => {return {name: this.jsonWithCounties[x].name, code: this.jsonWithCounties[x].code, population: 0}});\n\n    for(let i = 0; i < randomCountries.length; i++) {\n       await getCountryPopulation(randomCountries[i].code, (data) => {\n        randomCountries[i].population = data;\n      });\n    } \n    const correctOne = Math.floor(Math.random() * 4);\n\n    this.setState({randomCountries: randomCountries, correctOne: correctOne})\n  \n  }\n\n  async componentDidMount() {\n\n    const response = await fetch('countryList.json');\n    this.jsonWithCounties = await response.json();\n\n    this.resetRandomCountryList();\n\n  }\n\n  render() {\n    return <div>\n      <MainCard resetCallback={this.resetRandomCountryList} countries={this.state.randomCountries} correctOne={this.state.correctOne}/>\n      </div>;\n  }\n}\n\nfunction App() {\n  return (\n    <div>\n    <div className=\"background-image\"></div>\n      <div className=\"content\">\n      <MainComponent/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}