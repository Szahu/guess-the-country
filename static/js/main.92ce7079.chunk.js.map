{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["correctColor","wrongColor","hasADublet","array","i","length","j","getCountryPopulation","countryCode","callback","a","fetch","then","res","json","data","value","populationToFormatedString","population","finalPopulation","popString","toString","slice","console","error","MainCard","props","useState","pressedIndex","setPressedIndex","guessCasted","setGuessCasted","score","setScore","totalGuesses","setTotalGuesses","onClickCallback","index","correctOne","evaluateGuess","chooseRightColor","id","countries","map","country","color","label","name","onClick","correctButton","total","resetCallback","CountryButton","style","backgroundColor","StaticCountryButton","ResetButton","TitleComponent","fontSize","ScoreDisplay","Footer","href","resetRandomCountryList","jsonWithCounties","randomCountries","Math","floor","random","x","code","MainComponent","state","loaded","allGuesses","correctGuesses","loadedCountriesData","response","this","setState","tempCountriesData","shift","push","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92ce7079.chunk.js","sourcesContent":["//COLORS: \r\nexport const correctColor = '#95D575';\r\nexport const wrongColor = '#DE3C66';\r\n\r\nexport const hasADublet = (array) => {\r\n  for(let i = 0;i<array.length;i++) {\r\n    for(let j = 0;j < array.length;j++) {\r\n      if(i === j) {continue;}\r\n      if(array[i] === array[j]) {return true;}\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n//fethching json with list of all countries\r\nexport const fetchCountriesList = async (callback) => {\r\n    fetch('countryList.json', {headers: {\r\n      'Content-Type': 'applicaton/json',\r\n      'Accept': 'application/json'\r\n    }})\r\n    .then(function(response){\r\n      return response.json();\r\n    })\r\n    .then(function(myJson){\r\n      callback(myJson)\r\n    });\r\n}\r\n\r\n//calling worldbak api to get population by country code\r\nexport const getCountryPopulation = async function (countryCode, callback) {\r\n    await fetch(`https://api.worldbank.org/v2/country/${countryCode}/indicator/SP.POP.TOTL?format=json`)\r\n    .then(res => res.json())\r\n    .then(data => { callback(data[1][1].value)}); \r\n}\r\n\r\n//formatting population into readable string\r\nexport function populationToFormatedString(population) {\r\n\r\n  let finalPopulation = '';\r\n\r\n  if(population) {\r\n    let popString = population.toString();\r\n    switch(popString.length) {\r\n      case 10:\r\n        finalPopulation = popString.slice(0, 1) + ',' + popString[2] + ' billion';\r\n        break;\r\n      case 9:\r\n        finalPopulation = popString.slice(0, 3) + ',' + popString[4] + ' million';\r\n        break;\r\n      case 8:\r\n        finalPopulation = popString.slice(0, 2)  + ',' + popString[3] + ' million';\r\n        break;\r\n      case 7:\r\n        finalPopulation = popString.slice(0, 1)  + ',' + popString[2] + ' million';\r\n        break;\r\n      case 6:\r\n        finalPopulation = popString.slice(0, 3)  + ',' + popString[4] + ' thousand';\r\n        break;\r\n      case 5:\r\n          finalPopulation = popString.slice(0, 2)  + ',' + popString[3] + ' thousand';\r\n          break;\r\n      case 4:\r\n        finalPopulation = popString.slice(0, 1)  + ',' + popString[2] + ' thousand';\r\n        break;\r\n      case 3:\r\n        finalPopulation = popString.slice(0, 2)  + ',' + popString[3] + ' thousand';\r\n        break;\r\n      default:\r\n        console.error('something went wrong');\r\n        return 'gotta add more cases to the switch statement'\r\n    }\r\n\r\n    return finalPopulation;\r\n\r\n  } else {\r\n    return 0;\r\n  }\r\n  \r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport { getCountryPopulation, populationToFormatedString, correctColor, wrongColor, hasADublet } from \"./utils\";\r\nimport './App.css';\r\n\r\nconst MainCard = (props) => {\r\n\r\n    const [pressedIndex, setPressedIndex] = useState(-1);\r\n    const [guessCasted, setGuessCasted] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [totalGuesses, setTotalGuesses] = useState(0);\r\n    const evaluateGuess = (index) => {return index===props.correctOne ? true : false};\r\n    const onClickCallback = (index) => {\r\n      setGuessCasted(true); \r\n      setPressedIndex(index);\r\n      if(evaluateGuess(index)) {\r\n        setScore(score+1);\r\n      }\r\n        setTotalGuesses(totalGuesses+1);\r\n      }\r\n\r\n    const chooseRightColor = (i) => {\r\n      if(guessCasted) {\r\n        if(i===pressedIndex && i===props.correctOne) {return correctColor;}\r\n        else if(i===pressedIndex) {return wrongColor;} \r\n        else if(i===props.correctOne) {return correctColor}\r\n        else {return 'white';}\r\n      }\r\n    }\r\n\r\n    const correctButton = (country, i) => {\r\n      if(!guessCasted) {\r\n        return <CountryButton key={country.name} onClick={onClickCallback} index={i}\r\n        color={chooseRightColor(i)} label={country.name}/>\r\n      } else if(guessCasted) {\r\n        return <StaticCountryButton key={country.name} color={ guessCasted ? i===pressedIndex && i===props.correctOne ? correctColor : i===pressedIndex ?  wrongColor : i===props.correctOne ? correctColor : 'white' : 'white'} label={country.name}/>\r\n      }\r\n    }\r\n\r\n    return <div id=\"mainCard\">\r\n      <TitleComponent key='titleComponent' population={populationToFormatedString(props.countries[props.correctOne].population)}/>\r\n      {props.countries.map((country, i) => {\r\n        return correctButton(country, i);}\r\n      )}\r\n      <ScoreDisplay score={score} total={totalGuesses}/>\r\n      <ResetButton callback={() => {props.resetCallback(); setGuessCasted(false)}} guessCasted={guessCasted}/>\r\n    </div>\r\n}\r\n\r\nconst CountryButton = (props) => {\r\n  return <button id=\"countryButton\" onClick={() => props.onClick(props.index)} style={{backgroundColor: props.color}}>{props.label}</button>\r\n}\r\n\r\nconst StaticCountryButton = (props) => {\r\n  return <button id=\"countryButton\" style={{backgroundColor: props.color}}>{props.label}</button>\r\n}\r\n\r\nconst ResetButton = (props) => {\r\n  return <button id={props.guessCasted ? \"nextButton\" : \"nextButtonUnclickable\"} onClick={props.guessCasted ? props.callback : null}>Next</button>\r\n}\r\n\r\nconst TitleComponent = (props) => {\r\n  return <p id=\"titleText\">The country with population of <br/> <strong style={{fontSize: '33px'}}>{props.population}</strong> is:</p>\r\n}\r\n\r\nconst ScoreDisplay = (props) => {\r\n  return <div id=\"scoreDisplay\">Score: {props.score} / {props.total}</div>\r\n}\r\n\r\nconst Footer = () => {\r\n  return <div id=\"footer\">by Stanisław Solarewicz, statistic data fetched from: <a href=\"www.worldbank.org\">www.worldbank.org</a></div>\r\n}\r\n\r\nconst resetRandomCountryList = async (jsonWithCounties, callback) => {\r\n  let randomCountries = [0, 0, 0, 0];\r\n  while(hasADublet(randomCountries)) {\r\n    for(let i = 0; i < randomCountries.length;i++) {\r\n      randomCountries[i] = Math.floor(Math.random() * 200);\r\n    }\r\n  }\r\n\r\n  randomCountries = randomCountries.map((x) => {return {name: jsonWithCounties[x].name, code: jsonWithCounties[x].code, population: 0}});\r\n\r\n  for(let i = 0; i < randomCountries.length; i++) {\r\n     await getCountryPopulation(randomCountries[i].code, (data) => {\r\n      randomCountries[i].population = data;\r\n    });\r\n  } \r\n  const correctOne = Math.floor(Math.random() * 4);\r\n\r\n  callback(randomCountries, correctOne);\r\n}\r\n\r\nclass MainComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {randomCountries: [1,1,1,1], correctOne: 0, loaded: false};\r\n    this.jsonWithCounties = 0;\r\n    this.allGuesses = 0;\r\n    this.correctGuesses = 0;\r\n    \r\n    this.loadedCountriesData = [0,0,0,0];\r\n  }\r\n\r\n  async componentDidMount() {\r\n\r\n    const response = await fetch('countryList.json');\r\n    this.jsonWithCounties = await response.json();\r\n\r\n    resetRandomCountryList(this.jsonWithCounties, (randomCountries, correctOne) => {\r\n      this.setState({randomCountries: randomCountries, correctOne: correctOne});\r\n    });\r\n\r\n\r\n\r\n    //PRELOADING COUNTRY DATA\r\n    for(let i = 0;i < this.loadedCountriesData.length; i++) {\r\n      \r\n      let tempCountriesData = {};\r\n\r\n      await resetRandomCountryList(this.jsonWithCounties, (randomCountries, correctOne) => {\r\n          tempCountriesData.randomCountries=randomCountries; \r\n          tempCountriesData.correctOne=correctOne;\r\n        });\r\n\r\n        this.loadedCountriesData[i]=tempCountriesData;\r\n    }\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const onGuessCastCallback = () => {\r\n\r\n      this.loadedCountriesData.shift();\r\n      resetRandomCountryList(this.jsonWithCounties, \r\n        (randomCountries, correctOne) => {\r\n          this.loadedCountriesData.push({randomCountries: randomCountries, correctOne: correctOne});\r\n        });\r\n\r\n      this.setState({randomCountries: this.loadedCountriesData[0].randomCountries, correctOne: this.loadedCountriesData[0].correctOne});\r\n    } \r\n\r\n\r\n    return <div>\r\n      <MainCard resetCallback={onGuessCastCallback} \r\n        countries={this.state.randomCountries} correctOne={this.state.correctOne}/>\r\n      <Footer/>\r\n      </div>;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n    <div className=\"background-image\"></div>\r\n      <div className=\"content\">\r\n      <MainComponent/>    \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}